#!/bin/bash

# ðŸš€ Script de DÃ©ploiement - French Tech Barcelona Offices
# Usage: ./scripts/deploy.sh [vercel|netlify|docker]

set -e

echo "ðŸš€ DÃ©marrage du dÃ©ploiement..."

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction d'affichage
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# VÃ©rification des prÃ©requis
check_prerequisites() {
    print_status "VÃ©rification des prÃ©requis..."
    
    # VÃ©rifier Node.js
    if ! command -v node &> /dev/null; then
        print_error "Node.js n'est pas installÃ©"
        exit 1
    fi
    
    # VÃ©rifier npm
    if ! command -v npm &> /dev/null; then
        print_error "npm n'est pas installÃ©"
        exit 1
    fi
    
    # VÃ©rifier que nous sommes dans le bon rÃ©pertoire
    if [ ! -f "package.json" ]; then
        print_error "package.json non trouvÃ©. ExÃ©cutez ce script depuis la racine du projet."
        exit 1
    fi
    
    print_success "PrÃ©requis vÃ©rifiÃ©s"
}

# Build de production
build_project() {
    print_status "Build de production en cours..."
    
    if npm run build; then
        print_success "Build rÃ©ussi !"
    else
        print_error "Build Ã©chouÃ©"
        exit 1
    fi
}

# DÃ©ploiement Vercel
deploy_vercel() {
    print_status "DÃ©ploiement Vercel en cours..."
    
    if command -v vercel &> /dev/null; then
        print_status "Vercel CLI dÃ©tectÃ©"
        
        # VÃ©rifier si connectÃ©
        if vercel whoami &> /dev/null; then
            print_status "DÃ©ploiement en production..."
            vercel --prod --yes
            print_success "DÃ©ploiement Vercel rÃ©ussi !"
        else
            print_warning "Vercel CLI non connectÃ©. ExÃ©cutez 'vercel login' d'abord."
            print_status "Redirection vers la connexion..."
            vercel login
        fi
    else
        print_error "Vercel CLI non installÃ©. Installez-le avec: npm install -g vercel"
        exit 1
    fi
}

# DÃ©ploiement Netlify
deploy_netlify() {
    print_status "DÃ©ploiement Netlify en cours..."
    
    if command -v netlify &> /dev/null; then
        print_status "Netlify CLI dÃ©tectÃ©"
        netlify deploy --prod
        print_success "DÃ©ploiement Netlify rÃ©ussi !"
    else
        print_error "Netlify CLI non installÃ©. Installez-le avec: npm install -g netlify-cli"
        exit 1
    fi
}

# DÃ©ploiement Docker
deploy_docker() {
    print_status "DÃ©ploiement Docker en cours..."
    
    if command -v docker &> /dev/null; then
        print_status "Docker dÃ©tectÃ©"
        
        # Build de l'image
        print_status "Build de l'image Docker..."
        docker build -t french-tech-offices .
        
        # ArrÃªt des conteneurs existants
        docker stop french-tech-offices || true
        docker rm french-tech-offices || true
        
        # DÃ©marrage du nouveau conteneur
        print_status "DÃ©marrage du conteneur..."
        docker run -d --name french-tech-offices -p 3000:3000 french-tech-offices
        
        print_success "DÃ©ploiement Docker rÃ©ussi !"
        print_status "Application accessible sur http://localhost:3000"
    else
        print_error "Docker n'est pas installÃ©"
        exit 1
    fi
}

# Fonction principale
main() {
    local platform=${1:-vercel}
    
    echo "ðŸŽ¯ Plateforme de dÃ©ploiement: $platform"
    echo ""
    
    check_prerequisites
    build_project
    
    case $platform in
        "vercel")
            deploy_vercel
            ;;
        "netlify")
            deploy_netlify
            ;;
        "docker")
            deploy_docker
            ;;
        *)
            print_error "Plateforme non reconnue: $platform"
            print_status "Plateformes supportÃ©es: vercel, netlify, docker"
            exit 1
            ;;
    esac
    
    echo ""
    print_success "ðŸŽ‰ DÃ©ploiement terminÃ© avec succÃ¨s !"
    
    # Afficher les informations post-dÃ©ploiement
    case $platform in
        "vercel")
            echo ""
            print_status "ðŸ“‹ Prochaines Ã©tapes Vercel:"
            echo "   1. Configurez vos variables d'environnement"
            echo "   2. Connectez votre domaine personnalisÃ©"
            echo "   3. Activez les analytics"
            ;;
        "netlify")
            echo ""
            print_status "ðŸ“‹ Prochaines Ã©tapes Netlify:"
            echo "   1. Configurez vos variables d'environnement"
            echo "   2. Connectez votre domaine personnalisÃ©"
            echo "   3. Activez les forms et functions"
            ;;
        "docker")
            echo ""
            print_status "ðŸ“‹ Prochaines Ã©tapes Docker:"
            echo "   1. Configurez votre reverse proxy (nginx)"
            echo "   2. Activez HTTPS avec Let's Encrypt"
            echo "   3. Configurez le monitoring"
            ;;
    esac
}

# ExÃ©cution du script
main "$@"
